7-base_geometry.py
-----------------------------

Importing the class modulee
        >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Intializing base class
	>>> base = BaseGeometry()

pasing an empty parameter on area method

	 >>> base.area()
	 Traceback (most recent call last):
	 ...
	 Exception: area() is not implemented

Testing for one parameter on area:

	 >>> base.area(1)
	 Traceback (most recent call last):
         ...
	 TypeError: area() takes 1 positional argument but 2 were given

Testing for valid parameter
	 >>> base.integer_validator("integer", 1)

Testing when integer is zero
	 >>> base.integer_validator("integer", 0)
	 Traceback (most recent call last):
         ...
         ValueError: integer must be greater than 0

testing when integer less zero
	 >>> base.integer_validator("integer", -7)
	 Traceback (most recent call last):
         ...
         ValueError: integer must be greater than 0

Checking for non-integer types:
	 >>> base.integer_validator("bool", True)
	 Traceback (most recent call last):
         ...
         TypeError: bool must be an integer

	 >>> base.integer_validator("float", 2.5)
         Traceback (most recent call last):
         ...
         TypeError: float must be an integer

	 >>> base.integer_validator("complex", complex(2, 1))
         Traceback (most recent call last):
         ...
         TypeError: complex must be an integer

	 >>> base.integer_validator("string", "string")
         Traceback (most recent call last):
         ...
         TypeError: string must be an integer

	 >>> base.integer_validator("tuple", (3, 2))
         Traceback (most recent call last):
         ...
         TypeError: tuple must be an integer

	 >>> base.integer_validator("list", [1, 4, 5])
	 Traceback (most recent call last):
         ...
         TypeError: list must be an integer

	 >>> base.integer_validator("dict", {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: dict must be an integer

	 >>> base.integer_validator("set", {"my", "world"})
         Traceback (most recent call last):
         ...
         TypeError: set must be an integer

	 >>> base.integer_validator("frozenset", frozenset(["frozen", "set"]))
         Traceback (most recent call last):
         ...
         TypeError: frozenset must be an integer

	 >>> base.integer_validator("bytes", b"bytes")
         Traceback (most recent call last):
         ...
         TypeError: bytes must be an integer

	 >>> base.integer_validator("bytearrays", bytearray(b"bytes"))
         Traceback (most recent call last):
         ...
         TypeError: bytearrays must be an integer

Checking for no arguments to integer_validator:
	 >>> base.integer_validator()
	 Traceback (most recent call last):
         ...
	 TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
	 >>> base.integer_validator("integer")
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	 >>> base.integer_validator("integer", 1, 2)
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
